version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: imdb_postgres
    environment:
      POSTGRES_DB: imdb_db
      POSTGRES_USER: imdb_user
      POSTGRES_PASSWORD: imdb_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imdb_user -d imdb_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - imdb_network

  # Migration service - runs first to set up database schema
  migrations:
    build: .
    container_name: imdb_migrations
    environment:
      DATABASE_URL: postgresql://imdb_user:imdb_password@postgres:5432/imdb_db
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - imdb_network
    command: ["./scripts/startup.sh", "migrations"]
    restart: "no"

  api:
    build: .
    container_name: imdb_api
    environment:
      DATABASE_URL: postgresql://imdb_user:imdb_password@postgres:5432/imdb_db
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: "true"
      DATA_DIR: /app/data
      IMDB_BASE_URL: https://datasets.imdbws.com/
      TARGET_PROFESSIONS: actor,actress
      CHUNK_SIZE: 100
      ETL_TIMEOUT: 600
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./data:/app/data
      - .:/app
    networks:
      - imdb_network
    command: ["./scripts/startup.sh", "api"]



  # Service to create mock data (alternative to full ETL)
  setup:
    build: .
    container_name: imdb_setup
    environment:
      DATABASE_URL: postgresql://imdb_user:imdb_password@postgres:5432/imdb_db
      DATA_DIR: /app/data
      IMDB_BASE_URL: https://datasets.imdbws.com/
      TARGET_PROFESSIONS: actor,actress
      CHUNK_SIZE: 100
      ETL_TIMEOUT: 600
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./data:/app/data
      - .:/app
    networks:
      - imdb_network
    command: ["./scripts/startup.sh", "setup"]
    restart: "no"
    profiles:
      - setup

volumes:
  postgres_data:

networks:
  imdb_network:
    driver: bridge
    